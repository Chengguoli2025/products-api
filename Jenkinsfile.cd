pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Deployment Environment')
        string(name: 'GIT_SHA', defaultValue: '', description: 'Git commit SHA to deploy (leave empty for latest)')
    }
    
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        AWS_CREDENTIALS = credentials('aws-credentials')
    }
    
    stages {
        stage('Download Artifact') {
            steps {
                script {
                    try {
                        if (params.GIT_SHA) {
                            env.GIT_SHA = params.GIT_SHA
                            echo "Using provided GIT_SHA: ${env.GIT_SHA}"
                        } else {
                            env.GIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            echo "Using current HEAD GIT_SHA: ${env.GIT_SHA}"
                        }
                        echo "Looking for artifact: products-api-${env.GIT_SHA}.zip"
                        
                        // Look for artifact in shared folder
                        def artifactPath = "/tmp/jenkins-artifacts/products-api-${env.GIT_SHA}.zip"
                        
                        echo "Looking for artifact at: ${artifactPath}"
                        sh "ls -la /tmp/jenkins-artifacts/ || echo 'Artifacts directory does not exist'"
                        
                        def exists = sh(
                            script: "test -f ${artifactPath} && echo 'true' || echo 'false'",
                            returnStdout: true
                        ).trim()
                        
                        if (exists == 'true') {
                            echo "Found artifact, copying to workspace"
                            sh "cp ${artifactPath} ."
                        } else {
                            echo "Available artifacts:"
                            sh "ls -la /tmp/jenkins-artifacts/ || echo 'No artifacts found'"
                            error("Could not find artifact products-api-${env.GIT_SHA}.zip")
                        }
                        
                        echo "Artifact downloaded successfully"
                        sh "ls -la products-api-${env.GIT_SHA}.zip"
                        sh "unzip -o products-api-${env.GIT_SHA}.zip"
                        sh "ls -la"
                    } catch (Exception e) {
                        echo "Error in Download Artifact stage: ${e.getMessage()}"
                        echo "Available artifacts in CI job:"
                        sh "find /var/jenkins_home/jobs/products-api-ci/builds/*/archive/ -name '*.zip' 2>/dev/null || echo 'No artifacts found'"
                        throw e
                    }
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        try {
                            echo "Deploying application code to Lambda functions in ${params.ENVIRONMENT}"
                            
                            // Deploy all 3 Lambda functions from serverless.yml
                            def functions = [
                                [name: "products-api-getAllProducts-${params.ENVIRONMENT}", handler: "src/handlers/getAllProducts.handler"],
                                [name: "products-api-getProductDetails-${params.ENVIRONMENT}", handler: "src/handlers/getProductDetails.handler"],
                                [name: "products-api-addProduct-${params.ENVIRONMENT}", handler: "src/handlers/addProduct.handler"]
                            ]
                            
                            // Create shared IAM role first
                            def roleName = "lambda-execution-role-${params.ENVIRONMENT}"
                            echo "Creating/checking IAM role: ${roleName}"
                            
                            sh """
                                aws iam create-role \
                                    --role-name ${roleName} \
                                    --assume-role-policy-document '{
                                        "Version": "2012-10-17",
                                        "Statement": [{
                                            "Effect": "Allow",
                                            "Principal": {"Service": "lambda.amazonaws.com"},
                                            "Action": "sts:AssumeRole"
                                        }]
                                    }' \
                                    --region ap-southeast-2 || echo 'Role already exists'
                            """
                            
                            sh """
                                aws iam attach-role-policy \
                                    --role-name ${roleName} \
                                    --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole \
                                    --region ap-southeast-2 || echo 'Policy already attached'
                            """
                            
                            sleep(5) // Wait for role to be ready
                            
                            def roleArn = sh(
                                script: "aws iam get-role --role-name ${roleName} --query 'Role.Arn' --output text --region ap-southeast-2",
                                returnStdout: true
                            ).trim()
                            
                            // Deploy each Lambda function
                            for (func in functions) {
                                echo "Processing Lambda function: ${func.name}"
                                
                                def functionExists = sh(
                                    script: "aws lambda get-function --function-name ${func.name} --region ap-southeast-2 >/dev/null 2>&1 && echo 'true' || echo 'false'",
                                    returnStdout: true
                                ).trim()
                                
                                if (functionExists == 'false') {
                                    echo "Creating Lambda function: ${func.name}"
                                    sh """
                                        aws lambda create-function \
                                            --function-name ${func.name} \
                                            --runtime nodejs18.x \
                                            --role ${roleArn} \
                                            --handler ${func.handler} \
                                            --zip-file fileb://products-api-${env.GIT_SHA}.zip \
                                            --region ap-southeast-2
                                    """
                                } else {
                                    echo "Updating Lambda function: ${func.name}"
                                    sh """
                                        aws lambda update-function-code \
                                            --function-name ${func.name} \
                                            --zip-file fileb://products-api-${env.GIT_SHA}.zip \
                                            --region ap-southeast-2
                                    """
                                }
                            }

                            
                            echo "All Lambda functions deployed successfully"
                            
                        } catch (Exception e) {
                            echo "Error in Deploy Application stage: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    def apiUrl = "https://product-api.${params.ENVIRONMENT}.tonyffenochezra.com"
                    
                    sh "curl -f ${apiUrl}/products || exit 1"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}