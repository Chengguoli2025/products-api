pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Deployment Environment')
        string(name: 'GIT_SHA', defaultValue: '', description: 'Git commit SHA to deploy (leave empty for latest)')
    }
    
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        AWS_CREDENTIALS = credentials('aws-credentials')
    }
    
    stages {
        stage('Download Artifact') {
            steps {
                script {
                    try {
                        if (params.GIT_SHA) {
                            env.GIT_SHA = params.GIT_SHA
                            echo "Using provided GIT_SHA: ${env.GIT_SHA}"
                        } else {
                            env.GIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            echo "Using current HEAD GIT_SHA: ${env.GIT_SHA}"
                        }
                        echo "Looking for artifact: products-api-${env.GIT_SHA}.zip"
                        
                        // Look for artifact in shared folder
                        def artifactPath = "/tmp/jenkins-artifacts/products-api-${env.GIT_SHA}.zip"
                        
                        echo "Looking for artifact at: ${artifactPath}"
                        sh "ls -la /tmp/jenkins-artifacts/ || echo 'Artifacts directory does not exist'"
                        
                        def exists = sh(
                            script: "test -f ${artifactPath} && echo 'true' || echo 'false'",
                            returnStdout: true
                        ).trim()
                        
                        if (exists == 'true') {
                            echo "Found artifact, copying to workspace"
                            sh "cp ${artifactPath} ."
                        } else {
                            echo "Available artifacts:"
                            sh "ls -la /tmp/jenkins-artifacts/ || echo 'No artifacts found'"
                            error("Could not find artifact products-api-${env.GIT_SHA}.zip")
                        }
                        
                        echo "Artifact downloaded successfully"
                        sh "ls -la products-api-${env.GIT_SHA}.zip"
                        sh "unzip -o products-api-${env.GIT_SHA}.zip"
                        sh "ls -la"
                    } catch (Exception e) {
                        echo "Error in Download Artifact stage: ${e.getMessage()}"
                        echo "Available artifacts in CI job:"
                        sh "find /var/jenkins_home/jobs/products-api-ci/builds/*/archive/ -name '*.zip' 2>/dev/null || echo 'No artifacts found'"
                        throw e
                    }
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        try {
                            echo "Deploying application code to Lambda functions in ${params.ENVIRONMENT}"
                            
                            // Update all 3 Lambda functions (infrastructure pipeline creates them)
                            def functions = [
                                "products-api-getAllProducts-${params.ENVIRONMENT}",
                                "products-api-getProductDetails-${params.ENVIRONMENT}",
                                "products-api-addProduct-${params.ENVIRONMENT}"
                            ]
                            
                            // Update each Lambda function with new code
                            for (func in functions) {
                                echo "Updating Lambda function: ${func}"
                                
                                def functionExists = sh(
                                    script: "aws lambda get-function --function-name ${func} --region ap-southeast-2 >/dev/null 2>&1 && echo 'true' || echo 'false'",
                                    returnStdout: true
                                ).trim()
                                
                                if (functionExists == 'true') {
                                    // Update function code
                                    sh """
                                        aws lambda update-function-code \
                                            --function-name ${func} \
                                            --zip-file fileb://products-api-${env.GIT_SHA}.zip \
                                            --region ap-southeast-2
                                    """
                                    
                                    // Wait for code update to complete
                                    sh """
                                        aws lambda wait function-updated \
                                            --function-name ${func} \
                                            --region ap-southeast-2
                                    """
                                    
                                    // Read environment variables from JSON file and convert to AWS format
                                    
                                  def envFile = "config/env.${params.ENVIRONMENT}.json"
                                  def envVars = sh(
                                                    script: """jq -r 'to_entries | map("\\(.key)=\\(.value|tostring)") | join(",")' ${envFile}""",
                                                    returnStdout: true
                                                   ).trim()
                                    
                                    echo "Environment variables: ${envVars}"
                                    
                                    sh """
                                        aws lambda update-function-configuration \
                                            --function-name ${func} \
                                            --environment 'Variables={${envVars}}' \
                                            --region ap-southeast-2
                                    """
                                    
                                    echo "Updated Lambda function: ${func}"
                                } else {
                                    echo "Warning: Lambda function ${func} does not exist. Please run infrastructure pipeline first."
                                }
                            }

                            
                            echo "All Lambda functions deployed successfully"
                            echo "Note: Run infrastructure pipeline to connect API Gateway to these Lambda functions"
                            
                        } catch (Exception e) {
                            echo "Error in Deploy Application stage: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    def apiUrl = "https://product-api.${params.ENVIRONMENT}.tonyffenochezra.com"
                    
                    sh "curl -f ${apiUrl}/products || exit 1"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}