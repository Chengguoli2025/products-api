pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Deployment Environment')
        string(name: 'GIT_SHA', defaultValue: '', description: 'Git commit SHA to deploy (leave empty for latest)')
    }
    
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        AWS_CREDENTIALS = credentials('aws-credentials')
    }
    
    stages {
        stage('Download Artifact') {
            steps {
                script {
                    try {
                        if (params.GIT_SHA) {
                            env.GIT_SHA = params.GIT_SHA
                            echo "Using provided GIT_SHA: ${env.GIT_SHA}"
                        } else {
                            env.GIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            echo "Using current HEAD GIT_SHA: ${env.GIT_SHA}"
                        }
                        echo "Looking for artifact: products-api-${env.GIT_SHA}.zip"
                        
                        // Try to copy artifact directly from CI job workspace
                        def ciJobPath = "/var/jenkins_home/jobs/products-api-ci/builds"
                        def artifactFound = false
                        
                        // Find the artifact in recent builds
                        def builds = sh(
                            script: "ls -1t ${ciJobPath} | head -10",
                            returnStdout: true
                        ).trim().split('\n')
                        
                        for (build in builds) {
                            def artifactPath = "${ciJobPath}/${build}/archive/products-api-${env.GIT_SHA}.zip"
                            def exists = sh(
                                script: "test -f ${artifactPath} && echo 'true' || echo 'false'",
                                returnStdout: true
                            ).trim()
                            
                            if (exists == 'true') {
                                echo "Found artifact in build ${build}"
                                sh "cp ${artifactPath} ."
                                artifactFound = true
                                break
                            }
                        }
                        
                        if (!artifactFound) {
                            error("Could not find artifact products-api-${env.GIT_SHA}.zip in any recent CI builds")
                        }
                        
                        echo "Artifact downloaded successfully"
                        sh "ls -la products-api-${env.GIT_SHA}.zip"
                        sh "unzip -o products-api-${env.GIT_SHA}.zip"
                        sh "ls -la"
                    } catch (Exception e) {
                        echo "Error in Download Artifact stage: ${e.getMessage()}"
                        echo "Available artifacts in CI job:"
                        sh "find /var/jenkins_home/jobs/products-api-ci/builds/*/archive/ -name '*.zip' 2>/dev/null || echo 'No artifacts found'"
                        throw e
                    }
                }
            }
        }
        
        stage('Deploy to Lambda') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        try {
                            echo "Starting deployment to ${params.ENVIRONMENT}"
                            sh "ls -la"
                            sh "cat serverless.yml | head -20"
                            
                            def deployResult = sh(
                                script: "serverless deploy --stage ${params.ENVIRONMENT} --region ap-southeast-2 --verbose",
                                returnStatus: true
                            )
                            
                            if (deployResult != 0) {
                                error("Serverless deployment failed with exit code: ${deployResult}")
                            }
                            
                            echo "Deployment completed successfully"
                        } catch (Exception e) {
                            echo "Error in Deploy stage: ${e.getMessage()}"
                            throw e
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    def apiUrl = "https://product-api.${params.ENVIRONMENT}.tonyffenochezra.com"
                    
                    sh "curl -f ${apiUrl}/products || exit 1"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}