pipeline {
    agent any
    
    parameters {
        choice(name: 'ACTION', choices: ['deploy', 'destroy'], description: 'Infrastructure Action')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Environment')
    }
    
    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
        DOMAIN_NAME = 'tonyffenochezra.com'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        

        stage('Deploy Infrastructure') {
            when {
                expression { params.ACTION == 'deploy' }
            }
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']
                ]) {
                    script {
                        // Check if Lambda functions already exist
                        def functionsExist = sh(
                            script: "aws lambda get-function --function-name products-api-getAllProducts-${params.ENVIRONMENT} --region ap-southeast-2 >/dev/null 2>&1 && echo 'true' || echo 'false'",
                            returnStdout: true
                        ).trim()
                        
                        def createLambdaFunctions = (functionsExist == 'false') ? 'true' : 'false'
                        echo "Lambda functions exist: ${functionsExist}, will create: ${createLambdaFunctions}"
                        
                        sh """
                            aws cloudformation deploy \
                                --template-file infrastructure/api-gateway.yaml \
                                --stack-name products-api-gateway-${params.ENVIRONMENT} \
                                --parameter-overrides \
                                    Environment=${params.ENVIRONMENT} \
                                    DomainName=${env.DOMAIN_NAME} \
                                    SubDomain=product-api.${params.ENVIRONMENT} \
                                    CreateLambdaFunctions=${createLambdaFunctions} \
                                    HostedZoneId=Z09494101FQRZT7JTG6S1 \
                                --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
                        """
                    }
                }
            }
        }
        
        stage('Configure Route53') {
            when {
                expression { params.ACTION == 'deploy' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh """
                        aws cloudformation deploy \
                            --template-file infrastructure/route53.yaml \
                            --stack-name products-api-dns-${params.ENVIRONMENT} \
                            --parameter-overrides \
                                Environment=${params.ENVIRONMENT} \
                                DomainName=${env.DOMAIN_NAME} \
                                SubDomain=product-api.${params.ENVIRONMENT}
                    """
                }
            }
        }
        
        stage('Destroy Infrastructure') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    sh """
                        aws cloudformation delete-stack --stack-name products-api-dns-${params.ENVIRONMENT}
                        aws cloudformation delete-stack --stack-name products-api-gateway-${params.ENVIRONMENT}
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}