AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Type: String
  DomainName:
    Type: String
  SubDomain:
    Type: String

Resources:
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      ValidationMethod: DNS
      
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      
  GetAllProductsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'products-api-getAllProducts-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/getAllProducts.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Get all products' })
            };
          };
          
  GetProductDetailsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'products-api-getProductDetails-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/getProductDetails.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Get product details' })
            };
          };
          
  AddProductFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'products-api-addProduct-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/addProduct.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Add product' })
            };
          };
      
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'products-api-${Environment}'
      
  # /products resource
  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: products
      
  # GET /products - getAllProducts
  GetProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllProductsFunction.Arn}/invocations'
        
  # POST /products - addProduct
  PostProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddProductFunction.Arn}/invocations'
        
  # /products/{productId} resource
  ProductIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ProductsResource
      PathPart: '{productId}'
      
  # GET /products/{productId} - getProductDetails
  GetProductDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProductDetailsFunction.Arn}/invocations'
        
  # Lambda permissions
  GetAllProductsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetAllProductsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*'
      
  GetProductDetailsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetProductDetailsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*'
      
  AddProductPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddProductFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*'
      
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - GetProductsMethod
      - PostProductsMethod
      - GetProductDetailsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: !Ref Environment
      
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL
          
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGatewayStage


Outputs:
  ApiGatewayId:
    Value: !Ref ApiGateway
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'
      
  DomainName:
    Value: !GetAtt ApiDomainName.RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'
      
  HostedZoneId:
    Value: !GetAtt ApiDomainName.RegionalHostedZoneId
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'