AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Type: String
  DomainName:
    Type: String
  SubDomain:
    Type: String
  CreateLambdaFunctions:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Set to false if Lambda functions already exist'
  HostedZoneId:
    Type: String
    Default: 'Z03446223871XUH182D6F'
    Description: 'Hosted Zone ID for tonyffenochezra.com'

Conditions:
  ShouldCreateLambdaFunctions: !Equals [!Ref CreateLambdaFunctions, 'true']

Resources:
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: default

  DefaultSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: 172.31.0.0/20
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  DefaultSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: 172.31.16.0/20
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  DefaultSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: 172.31.32.0/20
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for addProduct Lambda function
      VpcId: !Ref DefaultVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'products-api-lambda-sg-${Environment}'

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '${SubDomain}.${DomainName}'
          HostedZoneId: !Ref HostedZoneId
  
  ParameterStorePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'products-api-parameter-store-${Environment}'
      Description: 'Allows Lambda functions to read Parameter Store values'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/products-api/${Environment}/*'
      
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref ParameterStorePolicy
        - !Ref DynamoDBPolicy
        - !Ref MSKPolicy
  
  DynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'products-api-dynamodb-${Environment}'
      Description: 'Allows Lambda functions to access DynamoDB table'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
            Resource: !GetAtt ProductsTable.Arn
            
  MSKPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'products-api-msk-${Environment}'
      Description: 'Allows Lambda functions to connect to MSK cluster'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - kafka-cluster:Connect
              - kafka-cluster:WriteData
              - kafka-cluster:ReadData
              - kafka-cluster:DescribeCluster
            Resource: !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/my-public-msk-cluster/*'
  
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'products-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
  GetAllProductsFunction:
    Type: AWS::Lambda::Function
    Condition: ShouldCreateLambdaFunctions
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Sub 'products-api-getAllProducts-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/getAllProducts.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Function created, waiting for deployment' })
            };
          };
          
  GetProductDetailsFunction:
    Type: AWS::Lambda::Function
    Condition: ShouldCreateLambdaFunctions
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Sub 'products-api-getProductDetails-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/getProductDetails.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Function created, waiting for deployment' })
            };
          };
          
  AddProductFunction:
    Type: AWS::Lambda::Function
    Condition: ShouldCreateLambdaFunctions
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Sub 'products-api-addProduct-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/addProduct.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Function created, waiting for deployment' })
            };
          };
          
  ProcessProductEventsFunction:
    Type: AWS::Lambda::Function
    Condition: ShouldCreateLambdaFunctions
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Sub 'products-api-processProductEvents-${Environment}'
      Runtime: nodejs18.x
      Handler: src/handlers/processProductEvents.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Function created, waiting for deployment' })
            };
          };
          
  MSKEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Condition: ShouldCreateLambdaFunctions
    DependsOn: ProcessProductEventsFunction
    Properties:
      EventSourceArn: !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/my-public-msk-cluster/*'
      FunctionName: !Sub 'products-api-processProductEvents-${Environment}'
      Topics:
        - !Sub 'product-event-v1-${Environment}'
      StartingPosition: LATEST
      BatchSize: 10
      
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'products-api-${Environment}'
      
  # /products resource
  ProductsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: products
      
  # GET /products - getAllProducts
  GetProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:products-api-getAllProducts-${Environment}/invocations'
        
  # POST /products - addProduct
  PostProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:products-api-addProduct-${Environment}/invocations'
        
  # /products/{productId} resource
  ProductIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ProductsResource
      PathPart: '{productId}'
      
  # GET /products/{productId} - getProductDetails
  GetProductDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:products-api-getProductDetails-${Environment}/invocations'
        
  # Lambda permissions (only created when functions are created)
  GetAllProductsPermission:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateLambdaFunctions
    DependsOn: GetAllProductsFunction
    Properties:
      FunctionName: !Sub 'products-api-getAllProducts-${Environment}'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
      
  GetProductDetailsPermission:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateLambdaFunctions
    DependsOn: GetProductDetailsFunction
    Properties:
      FunctionName: !Sub 'products-api-getProductDetails-${Environment}'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
      
  AddProductPermission:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateLambdaFunctions
    DependsOn: AddProductFunction
    Properties:
      FunctionName: !Sub 'products-api-addProduct-${Environment}'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'
      
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - GetProductsMethod
      - PostProductsMethod
      - GetProductDetailsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: !Ref Environment
      
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub '${SubDomain}.${DomainName}'
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL
          
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGatewayStage


Outputs:
  ApiGatewayId:
    Value: !Ref ApiGateway
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'
      
  DomainName:
    Value: !GetAtt ApiDomainName.RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'
      
  HostedZoneId:
    Value: !GetAtt ApiDomainName.RegionalHostedZoneId
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'
      
  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleArn'
      
